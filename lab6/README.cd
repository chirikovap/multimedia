Этот проект решает задачу многоклассовой классификации изображений одежды (10 классов, включая футболки, кроссовки, куртки и пр.) из датасета Fashion-MNIST, используя как базовые модели из библиотеки torchvision, так и собственноручно реализованные сверточные нейронные сети (CNN) на базе PyTorch. В рамках лабораторной работы были рассмотрены следующие этапы:

Загрузка и предобработка данных с использованием torchvision и стандартного pipeline обработки изображений (преобразование в тензоры, нормализация, масштабирование).
Обучение моделей: как базовой сверточной сети, так и улучшенной версии с Dropout и BatchNorm.
Оценка производительности моделей по различным метрикам качества (Accuracy, F1-score).
Проверка гипотез для повышения качества модели, включая использование аугментаций и других улучшений.
Самостоятельная реализация нейросети и анализ полученных результатов.
Выбор моделей

В качестве базовых моделей использованы:

Простой CNN: классическая сверточная архитектура с двумя сверточными и двумя полносвязными слоями, служащая отправной точкой.
Улучшенная CNN: включает в себя Batch Normalization, Dropout, увеличенное число фильтров и аугментации изображений.
Собственная реализация CNN с аналогичной архитектурой, но без использования torchvision.models.
Метрики

Для оценки качества моделей использовались следующие метрики:

Accuracy — общая точность классификации.
F1-score (взвешенный) — учитывает дисбаланс между классами и оценивает баланс между точностью и полнотой.
Оптимизация модели

Для улучшения производительности были выдвинуты и проверены следующие гипотезы:

Аугментации изображений: случайные повороты, флипы, изменение яркости и контраста.
Dropout и BatchNorm: регуляризация модели и ускорение сходимости.
Изменение оптимизатора: замена Adam на SGD с momentum.
Увеличение числа фильтров в сверточных слоях.
Выводы

В ходе выполнения лабораторной работы была успешно решена задача многоклассовой классификации изображений одежды на базе Fashion-MNIST.

Основные результаты:

Использование даже простых CNN позволило добиться высокой точности при относительно небольшом количестве параметров и ограниченных вычислительных ресурсах.
Улучшения в архитектуре модели (аугментации, BatchNorm, Dropout) существенно повысили метрики качества, увеличив F1-score более чем на 3% по сравнению с базовой моделью.
Реализация собственной модели вручную продемонстрировала метрики, сопоставимые или выше, чем у модели из torchvision, что подтверждает корректность выбранного подхода.
Анализ результатов по метрикам accuracy и F1-score позволил детально оценить эффективность классификации и выявить влияние каждого улучшения на качество модели.
